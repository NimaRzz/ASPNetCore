// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Infra.Data.Contexts;

#nullable disable

namespace Project.Infra.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250103164356_mig3")]
    partial class mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppointmentDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentDateStart")
                        .HasColumnType("datetime2");

                    b.Property<long>("CitizenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.HasIndex("PlanId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Project.Domain.Entities.Citizens.Citizen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("HouseholdCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PassportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonalizedCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UniqueCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.Office", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.OfficePlan", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PlanId");

                    b.ToTable("OfficePlans");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.WorkCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkStart")
                        .HasColumnType("time");

                    b.Property<int>("Workday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("WorkCalendars");
                });

            modelBuilder.Entity("Project.Domain.Entities.Plans.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndPlan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartPlan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Project.Domain.Entities.Province.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2487),
                            IsRemoved = false,
                            Name = "AzarbaijanSharghi"
                        },
                        new
                        {
                            Id = 2L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2539),
                            IsRemoved = false,
                            Name = "AzarbaijanGharbi"
                        },
                        new
                        {
                            Id = 3L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2556),
                            IsRemoved = false,
                            Name = "Ardabil"
                        },
                        new
                        {
                            Id = 4L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2573),
                            IsRemoved = false,
                            Name = "Isfahan"
                        },
                        new
                        {
                            Id = 5L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2589),
                            IsRemoved = false,
                            Name = "Alborz"
                        },
                        new
                        {
                            Id = 6L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2608),
                            IsRemoved = false,
                            Name = "Ilam"
                        },
                        new
                        {
                            Id = 7L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2626),
                            IsRemoved = false,
                            Name = "Bushehr"
                        },
                        new
                        {
                            Id = 8L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2642),
                            IsRemoved = false,
                            Name = "Tehran"
                        },
                        new
                        {
                            Id = 9L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2658),
                            IsRemoved = false,
                            Name = "ChaharmahaloBakhtiari"
                        },
                        new
                        {
                            Id = 10L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2675),
                            IsRemoved = false,
                            Name = "KhorasanJonubi"
                        },
                        new
                        {
                            Id = 11L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2690),
                            IsRemoved = false,
                            Name = "KhorasanRazavi"
                        },
                        new
                        {
                            Id = 12L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2706),
                            IsRemoved = false,
                            Name = "KhorasanShomali"
                        },
                        new
                        {
                            Id = 13L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2722),
                            IsRemoved = false,
                            Name = "Khuzestan"
                        },
                        new
                        {
                            Id = 14L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2738),
                            IsRemoved = false,
                            Name = "Zanjan"
                        },
                        new
                        {
                            Id = 15L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2753),
                            IsRemoved = false,
                            Name = "Semnan"
                        },
                        new
                        {
                            Id = 16L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2769),
                            IsRemoved = false,
                            Name = "SistanoBaluchestan"
                        },
                        new
                        {
                            Id = 17L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2785),
                            IsRemoved = false,
                            Name = "Fars"
                        },
                        new
                        {
                            Id = 18L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2802),
                            IsRemoved = false,
                            Name = "Qazvin"
                        },
                        new
                        {
                            Id = 19L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2849),
                            IsRemoved = false,
                            Name = "Qom"
                        },
                        new
                        {
                            Id = 20L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2866),
                            IsRemoved = false,
                            Name = "Kurdistan"
                        },
                        new
                        {
                            Id = 21L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2882),
                            IsRemoved = false,
                            Name = "Kerman"
                        },
                        new
                        {
                            Id = 22L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2899),
                            IsRemoved = false,
                            Name = "Kermanshah"
                        },
                        new
                        {
                            Id = 23L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2916),
                            IsRemoved = false,
                            Name = "KohgiluyehoBoyerahmad"
                        },
                        new
                        {
                            Id = 24L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2933),
                            IsRemoved = false,
                            Name = "Golestan"
                        },
                        new
                        {
                            Id = 25L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2949),
                            IsRemoved = false,
                            Name = "Gilan"
                        },
                        new
                        {
                            Id = 26L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2965),
                            IsRemoved = false,
                            Name = "Lorestan"
                        },
                        new
                        {
                            Id = 27L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2981),
                            IsRemoved = false,
                            Name = "Mazandaran"
                        },
                        new
                        {
                            Id = 28L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(2997),
                            IsRemoved = false,
                            Name = "Markazi"
                        },
                        new
                        {
                            Id = 29L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(3014),
                            IsRemoved = false,
                            Name = "Hormozgan"
                        },
                        new
                        {
                            Id = 30L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(3029),
                            IsRemoved = false,
                            Name = "Hamadan"
                        },
                        new
                        {
                            Id = 31L,
                            InsertTime = new DateTime(2025, 1, 3, 20, 13, 49, 854, DateTimeKind.Local).AddTicks(3045),
                            IsRemoved = false,
                            Name = "Yazd"
                        });
                });

            modelBuilder.Entity("Project.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Project.Domain.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Project.Domain.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Domain.Entities.Appointments.Appointment", b =>
                {
                    b.HasOne("Project.Domain.Entities.Citizens.Citizen", "Citizen")
                        .WithMany("Appointments")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Plans.Plan", "Plan")
                        .WithMany("Appointments")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Project.Domain.Entities.Citizens.Citizen", b =>
                {
                    b.HasOne("Project.Domain.Entities.Offices.Office", null)
                        .WithMany("Citizens")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.Office", b =>
                {
                    b.HasOne("Project.Domain.Entities.Province.Province", "Province")
                        .WithMany("Offices")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.OfficePlan", b =>
                {
                    b.HasOne("Project.Domain.Entities.Offices.Office", "Office")
                        .WithMany("OfficePlans")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project.Domain.Entities.Plans.Plan", "Plan")
                        .WithMany("OfficePlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.WorkCalendar", b =>
                {
                    b.HasOne("Project.Domain.Entities.Offices.Office", "Office")
                        .WithMany("WorkCalendars")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Project.Domain.Entities.Citizens.Citizen", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Project.Domain.Entities.Offices.Office", b =>
                {
                    b.Navigation("Citizens");

                    b.Navigation("OfficePlans");

                    b.Navigation("WorkCalendars");
                });

            modelBuilder.Entity("Project.Domain.Entities.Plans.Plan", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("OfficePlans");
                });

            modelBuilder.Entity("Project.Domain.Entities.Province.Province", b =>
                {
                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
